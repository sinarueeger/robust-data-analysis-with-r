[
["index.html", "Robust data analysis: an introduction to R Preface", " Robust data analysis: an introduction to R Sina Rüeger 2019-08-12 Preface This is the course material to the workshop Robust data analysis: an introduction to R. You find the slides here and the workshop in this repository. "],
["data-analysis.html", "Chapter 1 Data Analysis 1.1 Process to analyse data 1.2 Requirements to a Software 1.3 Automation", " Chapter 1 Data Analysis What is data anlysis and what makes it robust? 1.1 Process to analyse data wickham+grolemund: circle (Wickham &amp; Grolemund, 201) Elements &amp; Principles (Hicks &amp; Peng, 2019) 1.1.1 Loop (wickham + grolemund) 1.1.2 Elements &amp; Principles (hicks + peng) 1.1.3 Overlap between both approaches tidy data reproducibility flow + exit the flow or repeat the flow, modify share results (which can then be used as an input again) 1.2 Requirements to a Software reproducible used by others continuously development high-level exchange results with others 1.3 Automation Programming is essentially an automation of a process - for repeatable tasks (like adding two numbers) - scalable (many times repeating ) - complicated tasks (variable selection) - where precision is needed (adding two decimals) - reusing of frameworks (long code into functions) - reproduce it A side effect of a certain automation also brings reproducibility. "],
["introduction-of-r.html", "Chapter 2 Introduction of R 2.1 Capabilities of R 2.2 Constantly improving 2.3 Technical bits: Functions and libraries 2.4 R vs. RStudio 2.5 Hierarchy of best practices 2.6 R in the wild", " Chapter 2 Introduction of R 2.1 Capabilities of R (show diagram from heidi seibold) - It has been developed to do statistical data analysis - Data insights - simple calculations - advanced statistical models - statistical data analysis - exchange with others - access API (So the API is a layer of code that sits between the database and most database users.) - produce an API (also these resouces (h/t Sharla Gelfand)) - read in data - automise - speed up - run on a server - talk to github - enforces standards (because you need to work a certan way with a certain structure) 2.1.1 R has three things that I believe makes it special APIs RMarkdown (shiny, html, websites, … ) Plotting, anything visual 2.2 Constantly improving There are things R is good at and tasks that R is not that good at. And this has changed over time. Because R is an open source project, the language is constantly evolving &amp; improving. 2.3 Technical bits: Functions and libraries Programming typically works like this: you apply a function to an object. You could also say that you apply an action (a verb) to an object (a noun). Excel also has functions: these are the tabs, and the object would be your active sheet. This is an important propertiy, because a chain of such verbs can create a programming script. If you hear the term library or package, then this is simply a collection of functions. In opensource languages, anyone can contribute a package. And we will do this later. Example with plot: function, arguments, pacakage, libraary, objects 2.4 R vs. RStudio 2.4.1 R core anyone can contribute a package Show print screen / website 2.4.2 RStudio UI works for any platform costs for companies solutions for servers develop a lot of new packages anything between teaching and solutions for production shiny git : https://happygitwithr.com/ Where are things in RStudio?: https://twitter.com/RLadiesNCL/status/1138812826917724160/photo/1 2.5 Hierarchy of best practices documentation run all script version control unit tests and sanity checks write functions, package them and tell everyone continuous integration makefile (caching) 2.6 R in the wild https://www.hvitfeldt.me/blog/circle-love-making-hearts-with-circles/ https://twitter.com/AmeliaMN/status/1126891572807729152?s=09 sports science: https://jacquietran.github.io/2019_may_rladies_akl/R/#1 ggplot2: https://cedricscherer.netlify.com/2019/05/17/the-evolution-of-a-ggplot-ep.-1/ research compendium: https://github.com/seabbs/DirectEffBCGPolicyChange https://github.com/venexia/MR-antihypertensives-AD https://github.com/saralpulit/fatdistnGWAS https://www.samabbott.co.uk/ video, animation, presentation, website, write to excel "],
["workshop.html", "Chapter 3 Workshop 3.1 Plotting + model 3.2 Make a map 3.3 Import data 3.4 Report with Rmarkdown 3.5 Commenting &amp; Documentation 3.6 Create an R package 3.7 Extra stuff 3.8 Extra: Git &amp; R", " Chapter 3 Workshop Don’t hesitate to use paper + pen 3.1 Plotting + model 3.1.1 Task Change something on the plot 3.1.2 Good to know plotly, animation 3.2 Make a map 3.2.1 Task Change pin location make a leaflet with watercolors 3.2.2 Good to know 3.3 Import data Rexcel 3.3.1 Task import other data 3.3.2 info datapasta: https://twitter.com/dataandme/status/1148548556850114561 fabricatr: https://rviews.rstudio.com/2019/07/01/imagine-your-data-before-you-collect-it/ 3.3.3 good to know different r packages to import data: readr, data.table 3.4 Report with Rmarkdown 3.4.1 Task export as pdf/word/markdown 3.4.2 Infos https://rmd4sci.njtierney.com/ rmarkdown: https://holtzy.github.io/Pimp-my-rmd/ 3.4.3 Extra Look into xaringan and CSS file code download button: https://twitter.com/apreshill/status/1108925218850893832 3.5 Commenting &amp; Documentation How much documentation do you need? Think about your future self Add simple instructions and ask a colleague to do it For structure use simple commands (align, lintr) A good exercise: look at an old script and reformat. Reprohack! 3.6 Create an R package create a package with corporate colors EPFL: https://www.epfl.ch/campus/services/communication/wp-content/uploads/2019/03/EPFL-brand-guidelines.pdf https://nanx.me/ggsci/ color package: https://drsimonj.svbtle.com/creating-corporate-colour-palettes-for-ggplot2 3.6.1 Task Add an extra color 3.6.2 Info packages: https://www.slideshare.net/EmilyRobinson52/everything-you-wanted-to-know-about-making-an-r-package-but-were-afraid-to-ask packages: https://masalmon.eu/2017/12/11/goodrpackages/ 3.6.3 Extra Add your own function 3.7 Extra stuff Shiny collaborative writing Git &amp; R 3.8 Extra: Git &amp; R You use git already: congratulations. You want to use git but you are scared: - use the interface - use gist.github.com (great for blogposts and small scripts) - start with sharing slides / gist.github (from julie lowndes keynote) - happygit with R - https://saghirb.github.io/shared/Getting-Started-with-Git-and-GitHub-for-R-Users.html#1 - Playground: https://learngitbranching.js.org/ "],
["learning-r.html", "Chapter 4 Learning R 4.1 Embrace imperfection 4.2 How to ask for help 4.3 Become part of the community 4.4 Learning strategies", " Chapter 4 Learning R 4.1 Embrace imperfection Programming is 1. an iterative process 2. and there is never only one solution 4.1.1 Exploit imperfection Look at each others code Refactor your code Review each others code Pair programming 4.2 How to ask for help 4.2.1 1. Look online Stack Overflow (SO) RStudio Community 4.2.2 2. Create a reproducible example create a reproducbile example using a small R available dataset (e.g. iris) install.packages(\"reprex\") select code and run reprex https://github.com/jules32/useR-2019-keynote/tree/gh-pages/img 4.2.3 3. Ask on SO, twitter, RStudio help C+P r bit into one of the follwing streams: Ask within a community (R-Ladies, R4DS) https://community.rstudio.com/ https://stackoverflow.com/ Twitter using the #rstats hashtag: 4.3 Become part of the community 4.3.1 R-Ladies 4.3.2 Code of Conduct 4.3.3 Join an online community R for Data Science online learning community: https://www.rfordatasci.com/ (slack, tidytuesday) R-ladies Slack: https://www.rfordatasci.com/ French-speaking r-grrr Slack (+ online ressources) 4.3.4 Join an R meetup In the lemanic region: R-Ladies, RUG, R lunches, adminR R Ladies Remote (journal club) Full list of RUG’s here and for R-Ladies here. 4.3.5 Engage on Twitter Mara Averick Maëlle Salmon R for the rest of us WeAreRLadies 4.3.6 rOpenSci Attend a community call (archive). Contribute via the shinyapp (https://ropensci.shinyapps.io/contributr/) 4.3.7 Read blogposts Weekly supply of blogposts here: https://rweekly.org/ write a blogpost (gist.github.com!) 4.4 Learning strategies 4.4.1 Learn with isolated &amp; digestable examples 4.4.2 Surround yourself with the language: embed R into your life 4.4.3 Look for a steady stream of data or exercises tidytuesday Watch out for code puzzles: advent of code / tidies of march by Irene Steves 4.4.4 Watch recordings New York R conference recordings R conference recordings RStudio conference recordings rOpenSci community call archive 4.4.5 Make use of pen + paper "],
["appendix.html", "Appendix 4.5 More info 4.6 Inspiration for the course", " Appendix 4.5 More info https://learningstatisticswithr.com/ https://r4ds.had.co.nz/ 4.6 Inspiration for the course https://twitter.com/phillynerd/status/1130633179134607360?s=09 Ten Quick Tips for Delivering a Programming Lesson by Greg Wilson (also https://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1006023) Curriculum Development by Mine Cetinkaya-Rundel Clearify for whom this course is: https://twitter.com/RochelleTerman/status/1126642900006252544 https://github.com/rstudio/parsons https://carpentries.org/blog/2019/06/reproducible-science-r/ illustrations from http://jules32.github.io/ ggplot_flipbook demoR reproducible research: https://annakrystalli.me/talks/r-in-repro-research.html#15 This website was produced by bookdown and with a starter kit from https://github.com/seankross/bookdown-start. "]
]
